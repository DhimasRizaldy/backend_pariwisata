openapi: 3.0.0
info:
  title: Docs API Backend Pariwisata
  description: |-
    Backend sistem pariwisata Lampung adalah bagian dari infrastruktur teknologi yang mendukung aplikasi atau situs web pariwisata di Lampung. Sistem ini bertanggung jawab untuk mengelola dan menyediakan data terkait destinasi pariwisata, acara, fasilitas, dan informasi lainnya kepada pengguna. API (Antarmuka Pemrograman Aplikasi) backend pariwisata Lampung memberikan akses kepada pengembang untuk mengambil dan menyinkronkan informasi terkini terkait pariwisata secara otomatis.
    
    API backend ini mungkin mencakup endpoint atau titik akses yang memungkinkan penggunaan data seperti deskripsi tempat wisata, lokasi geografis, fasilitas yang tersedia, ulasan pengguna, dan informasi terkait lainnya. Penggunaannya dapat melibatkan operasi seperti pencarian, pemfilteran, dan pengambilan data untuk disajikan di aplikasi atau situs web pariwisata.
    
    Melalui API backend pariwisata Lampung, pengembang dapat mengintegrasikan informasi pariwisata dengan aplikasi pihak ketiga atau membuat aplikasi khusus yang menampilkan dan memanfaatkan data pariwisata secara efektif. Hal ini membantu dalam mempromosikan destinasi pariwisata Lampung dan memberikan pengalaman yang lebih baik bagi para wisatawan.
    
  version: 1.0.0
  contact:
    name: Backend Pariwisata
    email: dtekchannel02@gmail.com
servers:
  - url: http://localhost:3000/api/v1
  - url: https://backend-pariwisata.onrender.com/api/v1
tags:
  - name: User
    description: Operations related to auth User
  - name: Profile
    description: Operations related to Profile
  - name: Kategori Wisata
    description: Operations related to Kategori Wisata
  - name: Daerah Wisata
    description: Operations related to Daerah Wisata
  - name: Wisata
    description: Operations related to Kategori Wisata
  - name: Ulasan
    description: Operations related to Ulasan
  - name: Rekomendasi By User
    description: Operations related to Rekomendasi By User
paths:
  /auth/register:
    post:
      tags: 
      - User
      operationId: post-create-register
      summary: Register new users
      description: Register User Account
      requestBody:
            $ref: '#/components/requestBodies/createRegister'
      responses: 
        "201":
          description: Succesfull Register!.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/RegisterModel'
                        
                        
  /auth/login:
    post:
      tags: 
      - User
      operationId: post-login-user
      summary: Login Users
      description: Users account login
      requestBody:
            $ref: '#/components/requestBodies/createLoginUser'
      responses: 
        "201":
          description: Login success!.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoginUserModel'
  

  /auth/whoami:
    get:
      tags:
        - User
      operationId: get-fetch-whoami
      summary: Get Whoami
      description: Retrieves details of a specific users.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object

      security:
      - bearerAuth: []
                        
                        
                      




components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT


  schemas:
    BasicResponse:
      title: BasicResponse
      type: object
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: "OK"
          
    RegisterModel:
      title: Register
      type: object
      properties:
        email:
          type: string
          example: "usertest01@gmail.com"
        password:
          type: string
          example: "*******"
        googleId:
          type: string
          example: "null"
        role:
          type: string
          example: "user"
          
    LoginUserModel:
      title: Login
      type: object
      properties:
        email:
          type: string
          example: "usertest01@gmail.com"
        password:
          type: string
          example: "******"
          
    
          
    Pagination:
      title: Pagination
      type: object
      properties:
        links:
          type: object
          properties:
            next:
              type: string
              example: "https://domain.com/users?page=3&limit=10"
            prev:
              type: string
              example: "https://domain.com/users?page=1&limit=10"
        total_items:
          type: integer
          example: 100
          
          
  requestBodies:
      createRegister:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "usertest01@gmail.com"
                password:
                  type: string
                  example: "******"
                password_confirmation:
                  type: string
                  example: "******"
                  
      createLoginUser:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "usertest01@gmail.com"
                password:
                  type: string
                  example: "******"

                
                  
     
                           